Import( 'project', 'libs' )

import os.path
import sys

project.ObjectLibrary(
	'openfx',
	includes=[
		'src/tuttle/openfx',
	],
)

project.StaticLibrary(
        'openfxPluginSupport',
        dirs=[
                'src/tuttle/openfx/Support/Library'
        ],
        includes=[
                'src/tuttle/openfx/Support',
                'src', # temporary...
        ],
        libraries=[
                libs.openfx,
                libs.boost
        ],
        shared=True,
)

commonLibs = [
	libs.openfx,
	libs.boost,
	libs.boost_log,
	libs.dl,
]

if sys.platform == 'darwin':
   commonLibs.append(libs.corefoundation)

if project.env['mode'] != 'production':
	commonLibs.append( libs.system_debug_info )

project.StaticLibrary(
		'tuttleCommon',
		dirs      = ['src/tuttle/common'],
		includes  = ['src'],
		libraries = commonLibs,
		shared = True
	)

project.StaticLibrary(
		'tuttlePlugin',
		dirs      = ['src/tuttle/plugin'],
		includes  = ['src','src/tuttle/host/core'],
		libraries = [
				libs.tuttleCommon,
				libs.sequenceParser,
				libs.openfxPluginSupport,
				libs.terry,
				libs.gl,
			],
		shared = True
	)

tuttleHostLibs = [
		libs.tuttleCommon,
		libs.openfx,
		libs.dl,
		libs.boost_filesystem,
		libs.boost_serialization,
		libs.boost_thread,
		libs.boost_atomic,
		libs.boost_gil,
		libs.boost_log,
		libs.boost_program_options,
		#libs.boost_timer,
	]
tuttleHostFlags = {}

if project.TUTTLE_HOST_WITH_PYTHON_EXPRESSION:
	tuttleHostLibs.append( libs.boost_python )
	tuttleHostFlags['CPPDEFINES'] = ['TUTTLE_HOST_WITH_PYTHON_EXPRESSION']

if project.env['mode'] != 'production':
	tuttleHostLibs += [libs.png]

project.StaticLibrary(
		'tuttleHost',
		dirs      = ['src/tuttle/host'],
		includes  = ['src'],
		libraries = tuttleHostLibs,
		globalEnvFlags = tuttleHostFlags,
		shared = True
	)

# "tuttleTest" is not a build target, but centralize denpendencies needed
# for all tuttle unittest.
project.ObjectLibrary(
		'tuttleTest',
		includes  = ['src'],
		libraries = [
			libs.tuttleHost,
			libs.boost_unit_test_framework,
			]
	)

pyTuttle = project.pySwigBinding(
		packageName = "pyTuttle",
		moduleName = "tuttle",
		swigFlags = ["-threads"],
		sources = ['src/tuttle/host/tuttle.i'],
		libraries = [libs.tuttleHost, libs.python_numpy],
    )

pythonInstallDir = project.inOutputDir('python')
pythonFiles = project.scanFiles("python", accept=['*.py'])
pythonInstall = Install(pythonInstallDir, pythonFiles)

baseRoot='src'

headers=[]

headers+=Glob(baseRoot + '/tuttle/common/*.hpp')
headers+=Glob(baseRoot + '/tuttle/common/*/*.hpp')
headers+=Glob(baseRoot + '/tuttle/common/*/*/*.hpp')

headers+=Glob(baseRoot + '/tuttle/plugin/*.hpp')
headers+=Glob(baseRoot + '/tuttle/plugin/*/*.hpp')

headers+=Glob(baseRoot + '/tuttle/host/*.hpp')
headers+=Glob(baseRoot + '/tuttle/host/*/*.hpp')
headers+=Glob(baseRoot + '/tuttle/host/*/*/*.hpp')


tuttlePluginHeaders = [project.env.Install(os.path.join(project.inOutputHeaders(), Dir(baseRoot).rel_path(h.get_dir())), h.get_path()) for h in headers]

project.env.Alias('header', tuttlePluginHeaders)

project.env.Alias('all', pythonInstall)
project.env.Alias('all', tuttlePluginHeaders)
